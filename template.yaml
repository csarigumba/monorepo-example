AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda Monorepo - Root SAM Template

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, production]
    Description: Environment name

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs22.x
    MemorySize: 256
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        LOG_LEVEL: !If [IsProduction, "warn", "info"]
    Tracing: Active

Conditions:
  IsProduction: !Equals [!Ref Environment, "production"]

Resources:
  # API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      StageName: !Ref Environment
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      
  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-users"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: lambda-monorepo

  # Lambda Functions
  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-user-service"
      CodeUri: services/user-service/dist/
      Handler: index.handler
      Events:
        UsersApi:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /users
            Method: ANY
        UsersProxyApi:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /users/{proxy+}
            Method: ANY
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Tags:
        Environment: !Ref Environment
        Service: user-service

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"

  UsersTableName:
    Description: "DynamoDB Users table name"
    Value: !Ref UsersTable
    Export:
      Name: !Sub "${AWS::StackName}-UsersTable"

  UserFunctionArn:
    Description: "User Lambda Function ARN"
    Value: !GetAtt UserFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-UserFunctionArn"